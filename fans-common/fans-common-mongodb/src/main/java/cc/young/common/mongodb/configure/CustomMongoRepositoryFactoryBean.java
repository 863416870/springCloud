package cc.young.common.mongodb.configure;import cc.young.common.mongodb.dao.BaseRepository;import cc.young.common.mongodb.dao.impl.BaseRepositoryImpl;import org.springframework.data.mongodb.core.MongoOperations;import org.springframework.data.mongodb.repository.query.MongoEntityInformation;import org.springframework.data.mongodb.repository.support.MongoRepositoryFactory;import org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean;import org.springframework.data.repository.Repository;import org.springframework.data.repository.core.RepositoryInformation;import org.springframework.data.repository.core.RepositoryMetadata;import org.springframework.data.repository.core.support.RepositoryFactorySupport;import org.springframework.util.ClassUtils;import java.io.Serializable;/** *  自定义工厂bean */public class CustomMongoRepositoryFactoryBean <T extends Repository<S, ID>, S, ID extends Serializable> extends MongoRepositoryFactoryBean<T,S,ID> {    /**     * 默认构造方法     * @param repositoryInterface     */    public CustomMongoRepositoryFactoryBean(Class<? extends T> repositoryInterface) {        super(repositoryInterface);    }    /**     * 设置为自定义工厂     * @param operations     * @return     */    @Override    protected RepositoryFactorySupport getFactoryInstance(MongoOperations operations) {        return new CustomMongoRepositoryFactory(operations);    }    /**     * 自定义工厂类     */    public class CustomMongoRepositoryFactory extends MongoRepositoryFactory {        private final MongoOperations operations;        /**         * 默认的构造方法         * @param mongoOperations         */        public CustomMongoRepositoryFactory(MongoOperations mongoOperations) {            super(mongoOperations);            operations = mongoOperations;        }        /**         * Create a repository instance as backing for the query proxy         * @param information         * @return         */        @Override        protected Object getTargetRepository(RepositoryInformation information) {            //如果为自定义的类型，返回BaseRepositoryImpl            if(isBaseRepository(information.getRepositoryInterface())) {                MongoEntityInformation<?, Object> entityInformation = getEntityInformation(information.getDomainType());                return getTargetRepositoryViaReflection(BaseRepositoryImpl.class,entityInformation, operations);            }            return super.getTargetRepository(information);        }        /**         * Returns the base class backing the actual repository instance         * @param metadata         * @return         */        @Override        protected Class<?> getRepositoryBaseClass(RepositoryMetadata metadata) {            //如果为自定义的类型，返回BaseRepositoryImpl            if(isBaseRepository(metadata.getRepositoryInterface())) {                return BaseRepositoryImpl.class;            }            return super.getRepositoryBaseClass(metadata);        }        /**         * 判断Repository的接口是否为BaseRepository         * @param repositoryInterface         * @return         */        private boolean isBaseRepository(Class<?> repositoryInterface) {            return ClassUtils.isAssignable(BaseRepository.class, repositoryInterface);        }    }}