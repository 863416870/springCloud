package cc.young.common.mongodb.entity;import cc.young.common.mongodb.util.CriteriaUtil;import org.springframework.data.mongodb.core.query.Criteria;import java.util.Collection;@SuppressWarnings("ALL")public enum Opt {    EQUAL("=","EQUAL","等于") {        @Override        public Criteria buildCriteria(String column, Object params) {            return CriteriaUtil.eq(column,params);        }    },    NOT_EQUAL("<>","NOT_EQUAL","不等于") {        @Override        public Criteria buildCriteria(String column, Object params) {            return CriteriaUtil.ne(column,params);        }    },    NOT_LIKE("not like","NOT_LIKE","不像") {        @Override        public Criteria buildCriteria(String column, Object params) {           return null;        }    },    LIKE("like","LIKE","像") {        @Override        public Criteria buildCriteria(String column, Object params) {            return CriteriaUtil.like(column,column);        }    },    GREATER(">","GREATER","大于") {        @Override        public Criteria buildCriteria(String column, Object params) {            return CriteriaUtil.gt(column,params);        }    },    GREATER_EQUAL(">=","GREATER_EQUAL","大于等于") {        @Override        public Criteria buildCriteria(String column, Object params) {            return CriteriaUtil.gte(column,params);        }    },    LESS("<","LESS","小于") {        @Override        public Criteria buildCriteria(String column, Object params) {            return CriteriaUtil.lt(column,params);        }    },    LESS_EQUAL("<=","LESS_EQUAL","小于等于") {        @Override        public Criteria buildCriteria(String column, Object params) {            return CriteriaUtil.lte(column,params);        }    },    IN("in","IN","在里面") {        @Override        public Criteria buildCriteria(String column, Object params) {            return CriteriaUtil.in(column, (Collection<?>) params);        }    },    NOT_IN("not in","NOT_IN","不在里面") {        @Override        public Criteria buildCriteria(String column, Object params) {            return CriteriaUtil.nin(column, (Collection<?>) params);        }    },    IS("is","IS","是") {        @Override        public Criteria buildCriteria(String column, Object params) {            return CriteriaUtil.eq(column,params);        }    },    IS_NOT("is not","IS_NOT","不是") {        @Override        public Criteria buildCriteria(String column, Object params) {            return CriteriaUtil.ne(column,params);        }    },    AND("and","AND","并") {        @Override        public Criteria buildCriteria(String column, Object params) {            throw new RuntimeException("不支持操作");        }    },    OR("or","OR","或") {        @Override        public Criteria buildCriteria(String column, Object params) {            throw new RuntimeException("不支持操作");        }    },    ASC("asc","ASC","顺序") {        @Override        public Criteria buildCriteria(String column, Object params) {            throw new RuntimeException("不支持操作");        }    },    DESC("desc","DESC","倒序") {        @Override        public Criteria buildCriteria(String column, Object params) {            throw new RuntimeException("不支持操作");        }    };    private String key;    private String value;    private String description;    private Opt(String key, String value, String description) {        this.key = key;        this.value = value;        this.description = description;    }    public String getKey() {        return key;    }    public void setKey(String key) {        this.key = key;    }    public String getValue() {        return value;    }    public void setValue(String value) {        this.value = value;    }    public String getDescription() {        return description;    }    public void setDescription(String description) {        this.description = description;    }    public abstract Criteria buildCriteria(String column, Object params);}